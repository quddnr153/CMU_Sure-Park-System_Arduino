#include <Thread.h>
#include <ThreadController.h>
#include <SPI.h>
 #include <WiFi.h>

 #define PORTID  550               // IP socket port ID

 char ssid[] = "ASUS_Guest2";              // The network SSID for CMU unsecure network
 char c;                           // Character read from server
 int status = WL_IDLE_STATUS;      // Network connection status
 IPAddress server(192,168,1,23);  // The server's IP address
 WiFiClient client;                // The client (our) socket
 IPAddress ip;                     // The IP address of the shield
 IPAddress subnet;                 // The IP address of the shield
 long rssi;                        // Wifi shield signal strength
 byte mac[6];                      // Wifi shield MAC address


// ThreadController that will controll all threads
ThreadController controll = ThreadController();

//My Thread (as a pointer)
Thread* myThread = new Thread();
//His Thread (not pointer)
Thread hisThread = Thread();

// callback for myThread
void niceCallback(){
  Serial.print("COOL! I'm running on: ");
  Serial.println(millis());
  Serial.println("1. Client send : Bye.");
  client.println("Bye.");
}

// callback for hisThread
void boringCallback(){
   Serial.print("2. Server Message: ");

      char c = ' ';      
      while ( c!= '\n' )
      {
        if (client.available()) 
        {
          c = client.read();
          Serial.write(c);
        }
      }
}

void setup(){
  Serial.begin(9600);

  // Configure myThread
  myThread->onRun(niceCallback);
  myThread->setInterval(1500);

  // Configure myThread
  hisThread.onRun(boringCallback);
  hisThread.setInterval(1500);

  // Adds both threads to the controller
  controll.add(myThread);
  controll.add(&hisThread); // & to pass the pointer to it

    Serial.println("Attempting to connect to network...");
  Serial.print("SSID: ");
  Serial.println(ssid);
  
  // Attempt to connect to Wifi network.
  while ( status != WL_CONNECTED) 
  { 
     Serial.print("Attempting to connect to SSID: ");
     Serial.println(ssid);
     status = WiFi.begin(ssid);
  }  
   
  Serial.println( "Connected to network:" );
  Serial.println( "\n----------------------------------------" );

  // Print the basic connection and network information.
  printConnectionStatus();

  Serial.println( "\n----------------------------------------\n" );

    Serial.print("\nAttempting to connect to server...");
  
  if (client.connect(server, PORTID)) 
  {
      Serial.println("connected");
  }else{
    delay(10000);
  }
}

void loop(){
  // run ThreadController
  // this will check every thread inside ThreadController,
  // if it should run. If yes, he will run it;
  controll.run();

  // Rest of code
  float h = 3.1415;
  h/=2;
}


/************************************************************************************************
* The following method prints out the connection information
************************************************************************************************/

 void printConnectionStatus() 
 {
     // Print the basic connection and network information: Network, IP, and Subnet mask
     ip = WiFi.localIP();
     Serial.print("Connected to ");
     Serial.print(ssid);
     Serial.print(" IP Address:: ");
     Serial.println(ip);
     subnet = WiFi.subnetMask();
     Serial.print("Netmask: ");
     Serial.println(subnet);
   
     // Print our MAC address.
     WiFi.macAddress(mac);
     Serial.print("WiFi Shield MAC address: ");
     Serial.print(mac[5],HEX);
     Serial.print(":");
     Serial.print(mac[4],HEX);
     Serial.print(":");
     Serial.print(mac[3],HEX);
     Serial.print(":");
     Serial.print(mac[2],HEX);
     Serial.print(":");
     Serial.print(mac[1],HEX);
     Serial.print(":");
     Serial.println(mac[0],HEX);
   
     // Print the wireless signal strength:
     rssi = WiFi.RSSI();
     Serial.print("Signal strength (RSSI): ");
     Serial.print(rssi);
     Serial.println(" dBm");

 } // printConnectionStatus